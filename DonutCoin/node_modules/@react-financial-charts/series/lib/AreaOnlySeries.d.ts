import { ScaleContinuousNumeric } from "d3-scale";
import { CurveFactory } from "d3-shape";
import * as React from "react";
export interface AreaOnlySeriesProps {
    /**
     * The base y value to draw the area to.
     */
    readonly base?: number | ((yScale: ScaleContinuousNumeric<number, number>, d: [number, number], moreProps: any) => number | undefined);
    readonly canvasClip?: (context: CanvasRenderingContext2D, moreProps: any) => void;
    /**
     * Wether to connect the area between undefined data points.
     */
    readonly connectNulls?: boolean;
    /**
     * A factory for a curve generator for the area.
     */
    readonly curve?: CurveFactory;
    /**
     * The default accessor for defined returns not NaN, thus assumes that the input data is always a number.
     */
    readonly defined?: (data: number | undefined) => boolean;
    /**
     * Color, gradient, or pattern to use for fill.
     */
    readonly fillStyle?: string | ((context: CanvasRenderingContext2D, moreProps: any) => string | CanvasGradient | CanvasPattern);
    /**
     * Selector for data to plot.
     */
    readonly yAccessor: (data: any) => number | undefined;
}
/**
 * `AreaOnlySeries` component.
 */
export declare class AreaOnlySeries extends React.Component<AreaOnlySeriesProps> {
    static defaultProps: {
        connectNulls: boolean;
        defined: (d: number | undefined) => boolean;
        base: (yScale: ScaleContinuousNumeric<number, number>) => any;
    };
    render(): JSX.Element;
    private readonly drawOnCanvas;
}
