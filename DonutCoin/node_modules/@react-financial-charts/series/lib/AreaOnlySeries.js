import { first, functor, getAxisCanvas, GenericChartComponent } from "@react-financial-charts/core";
import { area } from "d3-shape";
import * as React from "react";
/**
 * `AreaOnlySeries` component.
 */
export class AreaOnlySeries extends React.Component {
    constructor() {
        super(...arguments);
        this.drawOnCanvas = (ctx, moreProps) => {
            const { connectNulls, fillStyle, curve, canvasClip, yAccessor, defined = AreaOnlySeries.defaultProps.defined, base, } = this.props;
            const { xScale, chartConfig: { yScale }, plotData, xAccessor, } = moreProps;
            if (canvasClip !== undefined) {
                ctx.save();
                canvasClip(ctx, moreProps);
            }
            if (fillStyle !== undefined) {
                if (typeof fillStyle === "string") {
                    ctx.fillStyle = fillStyle;
                }
                else {
                    ctx.fillStyle = fillStyle(ctx, moreProps);
                }
            }
            const newBase = functor(base);
            const areaSeries = area()
                .x((d) => Math.round(xScale(xAccessor(d))))
                .y0((d) => newBase(yScale, d, moreProps))
                .y1((d) => Math.round(yScale(yAccessor(d))));
            if (curve !== undefined) {
                areaSeries.curve(curve);
            }
            if (!connectNulls) {
                areaSeries.defined((d) => defined(yAccessor(d)));
            }
            ctx.beginPath();
            areaSeries.context(ctx)(plotData);
            ctx.fill();
            if (canvasClip !== undefined) {
                ctx.restore();
            }
        };
    }
    render() {
        return React.createElement(GenericChartComponent, { canvasDraw: this.drawOnCanvas, canvasToDraw: getAxisCanvas, drawOn: ["pan"] });
    }
}
AreaOnlySeries.defaultProps = {
    connectNulls: false,
    defined: (d) => d !== undefined && !isNaN(d),
    base: (yScale) => first(yScale.range()),
};
//# sourceMappingURL=AreaOnlySeries.js.map